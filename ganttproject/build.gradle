buildscript {
    ext.kotlin_version = '1.3.+'
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'kotlin'


ext {
    libDir = 'lib/core'
}

configurations {
    exportedLibs
    exported.extendsFrom archives, providedCompile, exportedLibs
}

dependencies {
    providedCompile project(':biz.ganttproject.core')
    providedCompile project(path: ':biz.ganttproject.app.libs', configuration: 'exported')
    providedCompile project(path: ':biz.ganttproject.app.localization', configuration: 'exported')

    exportedLibs files("lib/core/eclipsito.jar")
    exportedLibs 'commons-codec:commons-codec:1.10'
    exportedLibs 'org.apache.poi:poi:3.17'

    direct 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'
    direct 'org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.3.2'


    compile configurations.direct
    compile configurations.providedCompile
    compile configurations.exportedLibs
    compile fileTree(dir: project.ext.libDir, include: ['*.jar'])
    compile files('data/resources')

    testImplementation group: 'org.easymock', name: 'easymock', version: '4.+'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.+'

    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.+'

//    compile "de.jensd:fontawesomefx-materialicons:2.2.+"

}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDirs = ["src"]
            include "**/*.css"
        }
    }

    main.kotlin.srcDirs += 'src'
    test.kotlin.srcDirs += 'test'
}


task updateVersion {
    doFirst {
        def gpVersionFile = new File("${projectDir}/src/net/sourceforge/ganttproject/GPVersion.java")
        def gpversion = gpVersionFile.getText('UTF-8')
                .replaceAll('.*BUILD.NUMBER.*', "  public static String BUILD = \"${rootProject.buildNum}\"; // BUILD NUMBER")
        gpVersionFile.write(gpversion, 'UTF-8')
    }
}


task copyPluginFiles(dependsOn: jar) {
    doLast {
        println ">>> Installing $project.name"
        copy {
            into(new File(rootProject.pluginsDir, project.name))
            from(fileTree(".")) {
                include "plugin.xml"
                include "data/resources/**.ttf"
                include "data/resources/**.properties"
                include "data/resources/calendar/**"
                include "data/resources/icons/**"
                include "data/resources/language/**"
                include "data/resources/xslfo/**"
                include "data/resources/xslt/**"
            }
        }
        copy {
            into(new File(rootProject.pluginsDir, "${project.name}/lib/"))
            from(jar.outputs.getFiles().getFiles().flatten())
            from(configurations.compileClasspath.minus(configurations.providedCompile)) {
                include "*.jar"
            }
            rename { filename -> filename + ".lib" }
        }
        println "<<< $project.name"
    }
}

task copyEclipsito(type: Copy) {
    into(rootProject.distBinDir)
    from(fileTree("lib/core")) {
        include "eclipsito.jar"
    }
}

task copyPlugin(dependsOn: ['copyPluginFiles', 'copyEclipsito']) {
    doFirst {
        println "Copying $project.name to $rootProject.pluginsDir"
    }
}

mainClassName="net.sourceforge.ganttproject.AppKt"

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

